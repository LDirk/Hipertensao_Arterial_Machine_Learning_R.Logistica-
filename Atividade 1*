# Importando as bibliotecas a serem utilizadas
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats

# Abrindo o dataset com as colunas desejadas no estudo. 
df = pd.read_csv('/content/breast_cancer - breast_cancer.csv',usecols=['worst concave points', 'mean concavity','worst perimeter','worst radius','worst area','diagnosis'])

# Verificando os 5 primeiros registros
df.head()


# Separando em subconjuntos. 
df_maligno = df[df['diagnosis'] == 'malignant']
df_benigno = df[df['diagnosis'] == 'benign']

# Verificando os valores distintos da coluna
valores_distintos_maligno = df_maligno['diagnosis'].unique()
valores_distintos_benigno = df_benigno['diagnosis'].unique()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Criando os histogramas das váriaveis no qual diagnóstico = Maligno. 

# Parâmetros. 
# Tamanho, número de separação de barras, listras atrás, histograma com a definição das áreas = 1 (Probabilidade)
df_maligno.hist(figsize=(13, 8), bins=20,grid=False,density=True)
plt.show()

# Aparentemente nenhuma distribuição dos dados possui distribuição normal. 

# Realizando o teste de shapiro wilk. 

# h0:Os dados seguem uma distribuição normal
# h1:Os dados não seguem uma distribuição normal. 

for coluna in df_maligno.columns:
  if coluna != 'diagnosis':
    statistic, p_valor = stats.shapiro(df_maligno[coluna].astype(float))
    print(f'Coluna {coluna}: p-valor = {p_valor:.3f}')

# Portanto, como o p-valor é muito baixo, temos evidências para rejeitar h0. Logo, os dados não seguem uma distribuição normal. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Criando os histogramas das váriaveis no qual diagnóstico = benigno. 

# Parâmetros. 
# Tamanho, número de separação de barras, listras atrás, histograma com a definição das áreas = 1 (Probabilidade)
df_benigno.hist(figsize=(13, 8), bins=20,grid=False,density=True)
plt.show()

# Aparentemente nenhuma distribuição dos dados possui distribuição normal. 

# Realizando o teste de shapiro wilk. 

# h0:Os dados seguem uma distribuição normal
# h1:Os dados não seguem uma distribuição normal. 

for coluna in df_benigno.columns:
  if coluna != 'diagnosis':
    statistic, p_valor = stats.shapiro(df_benigno[coluna].astype(float))
    print(f'Coluna {coluna}: p-valor = {p_valor:.3f}')

# Nas variáveis worst radius e worst perimeter, temos um p-valor alto, ou seja, não temos evidências para rejeitar h0. Portando, não podemos dizer que os dados não seguem uma distribuição normal. 
# No restante, temos evidência para rejeitar h0. Logo, os dados não seguem uma distribuição normal. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Gráficos de dispersão dois-a-dois para classificados como malignant

# Parametros
# Dataset, tamanho
sns.pairplot(df_maligno)

print("")

# Criando a matriz de correlação de pearson. 


correlacao = df_maligno.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlacao, annot=True)
plt.show()

# Através do gráfico e da matriz de correlação, observamos que nas variáveis com classificação 'malignant' , apenas radius x perimeter, radius x area e perimiter x area possui correlação forte.
# Porém, isto é obvio, pós uma tem origem na outra. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Gráficos de dispersão dois-a-dois para classificados como benignant

# Parametros
# Dataset, tamanho
sns.pairplot(df_benigno)

print("")

# Criando a matriz de correlação de pearson. 


correlacao = df_benigno.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlacao, annot=True)
plt.show()

# De forma análoga ao maligno, somente radius, area e perimetro possuem correlação 2x2.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

summary_matrix_maligno = df_maligno.describe()
print(summary_matrix_maligno)

summary_matrix_benigno = df_benigno.describe()
print(summary_matrix_benigno)




































