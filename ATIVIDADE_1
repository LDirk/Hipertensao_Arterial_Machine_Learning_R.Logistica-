# Importando as bibliotecas a serem utilizadas
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as stats

# Abrindo o dataset com as colunas desejadas no estudo. 
df = pd.read_csv('/content/breast_cancer - breast_cancer.csv',usecols=['worst concave points', 'mean concavity','worst perimeter','worst radius','worst area','diagnosis'])

# Verificando os 5 primeiros registros
df.head()


# Separando em subconjuntos. 
df_maligno = df[df['diagnosis'] == 'malignant']
df_benigno = df[df['diagnosis'] == 'benign']

# Verificando os valores distintos da coluna
valores_distintos_maligno = df_maligno['diagnosis'].unique()
valores_distintos_benigno = df_benigno['diagnosis'].unique()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Criando os histogramas das váriaveis no qual diagnóstico = Maligno. 

# Parâmetros. 
# Tamanho, número de separação de barras, listras atrás, histograma com a definição das áreas = 1 (Probabilidade)
df_maligno.hist(figsize=(13, 8), bins=20,grid=False,density=True)
plt.show()

# Aparentemente nenhuma distribuição dos dados possui distribuição normal. 

# Realizando o teste de shapiro wilk. 

# h0:Os dados seguem uma distribuição normal
# h1:Os dados não seguem uma distribuição normal. 

for coluna in df_maligno.columns:
  if coluna != 'diagnosis':
    statistic, p_valor = stats.shapiro(df_maligno[coluna].astype(float))
    print(f'Coluna {coluna}: p-valor = {p_valor:.3f}')

# Portanto, como o p-valor é muito baixo, temos evidências para rejeitar h0. Logo, os dados não seguem uma distribuição normal. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------













































# Não possui nenhuma semelhança com a distribuição normal. 
# A sua grande massa de probabilidade se encontra nos valores 0 a 100. 
# Não possui simetria em torno da sua média e mediana. 

sns.displot(df['worst concave points'], kde=False, bins=10, color='black')
plt.title('worst concave points')

--------------------------------------------------------------------------------------------------------------------------------------------------------

# Não possui nenhuma semelhança com a distribuição normal. 
# A sua grande massa de probabilidade se encontra nos valores 0 a 100. 
# Não possui simetria em torno da sua média e mediana. 

sns.displot(df['mean concavity'], kde=False, bins=10, color='black')
plt.title('mean concavity')

--------------------------------------------------------------------------------------------------------------------------------------------------------

# Olhando esse histograma, não podemos afirmar que ele possui uma distribuição normal, pois não possui a simetria em torno da sua média.
# Porém, devemos investigar, pois parece se aproximar de uma normal. 
# Podemos investigar através do teste de shapiro-wilk se esses dados possuem uma distribuição normal. 

sns.displot(df['worst perimeter'], kde=False, bins=10, color='black')
plt.title('worst perimeter')

# h0:Os dados seguem uma distribuição normal

stat, p = shapiro(df['worst perimeter'])
print('Estatística de teste: ', stat)
print('Valor p: ', p)

# Com uma significância abaixo de 5% eu rejeito a hipótese nula de que os dados seguem uma distribuição normal

--------------------------------------------------------------------------------------------------------------------------------------------------------

# Olhando esse histograma, não podemos afirmar que ele possui uma distribuição normal, pois não possui a simetria em torno da sua média.
# Porém, devemos investigar, pois parece se aproximar de uma normal. 
# Podemos investigar através do teste de shapiro-wilk se esses dados possuem uma distribuição normal. 

sns.displot(df['worst radius'], kde=False, bins=10, color='black')
plt.title('worst radius')

# h0:Os dados seguem uma distribuição normal

stat, p = shapiro(df['worst radius'])
print('Estatística de teste: ', stat)
print('Valor p: ', p)

# Com uma significância abaixo de 5% eu rejeito a hipótese nula de que os dados seguem uma distribuição normal

--------------------------------------------------------------------------------------------------------------------------------------------------------

# Não possui nenhuma semelhança com a distribuição normal. 
# A sua grande massa de probabilidade se encontra nos valores 0 a 1000. 
# Não possui simetria em torno da sua média e mediana.

sns.displot(df['worst area'], kde=False, bins=10, color='black')
plt.title('worst area')


--------------------------------------------------------------------------------------------------------------------------------------------------------

plt.scatter(df['worst concave points'], df['mean concavity'])
plt.xlabel('worst concave points')
plt.ylabel('mean concavity')

plt.scatter(df['worst concave points'], df['worst perimeter'])
plt.xlabel('worst concave points')
plt.ylabel('worst perimeter')

plt.scatter(df['worst concave points'], df['worst radius'])
plt.xlabel('worst concave points')
plt.ylabel('worst radius')

plt.scatter(df['worst concave points'], df['worst area'])
plt.xlabel('worst concave points')
plt.ylabel('worst area')
--------------------------------------------------------------------------------------------------------------------------------------------------------

plt.scatter(df['mean concavity'], df['worst perimeter'])
plt.xlabel('mean concavity')
plt.ylabel('worst perimeter')


plt.scatter(df['mean concavity'], df['worst radius'])
plt.xlabel('mean concavity')
plt.ylabel('worst radius')

plt.scatter(df['mean concavity'], df['worst area'])
plt.xlabel('mean concavity')
plt.ylabel('worst area')

--------------------------------------------------------------------------------------------------------------------------------------------------------

plt.scatter(df['worst perimeter'], df['worst radius'])
plt.xlabel('worst perimeter')
plt.ylabel('worst radius')

plt.scatter(df['worst perimeter'], df['worst area'])
plt.xlabel('worst perimeter')
plt.ylabel('worst area')

--------------------------------------------------------------------------------------------------------------------------------------------------------

plt.scatter(df['worst radius'], df['worst area'])
plt.xlabel('worst radius')
plt.ylabel('worst area')


